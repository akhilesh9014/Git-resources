

git init <repository name>                           # This command is used to start a new repository.

git config –global user.name "name"
git config –global user.email "email address"        # This command sets the author name and email address respectively
                                                       to be used with your commits.
                                                       
git config --edit --global                           # once enter this command that will show the edit the golbal config options                                                       

====================================================
NOTE: [ change email.user name =  vi ~/.gitconfig ]
====================================================

git clone <url>                                      # This command is used to obtain a repository from an existing URL.
git remote set-url origin <url>                      # this command is used for change the remote repo in git-cmd line.
git remote -v                                        # it show you that existing remote repo in git.

git add <file name>                                  # this command is adds a file to working to staging area.
git add -A                                           # Add all new and changed files to the staging area.
git status                                           # This command lists all the files that have to be committed.
git commit -m "Type in the commit message" < >          # This command records or snapshots the file permanently in the version history.
git commit -a -m " msg "                             # This command commits any files you’ve added with the git add command and also commits any files you’ve changed since then.

git reset head <file name>                           # staging area to workplace
git reset --soft <commit id>                         # local repo to staging area
git show <cmt id>                                    # show the all commit id files
------------------------------
GIT LOG
------------------------------
git log                                              # history of your repo
git log -n(enter number)                             # display latest numbers u want to wish
git log --oneline                                    # each commit to a single line.
git log  -p                                          # Display the full diff of each commit.
git log --stat                                       # Include which files were altered and the relative number of lines 
                                                       that were added or deleted from each of them.
git log --author="<name>"                            # search for commits by a particular author
git log --author="<> --oneline
git log --author="<>" --oneline -n

git log --grep="<name>"                              # Search for commits with a commit message that matches <name>
git log <since>..<until>                             # Show commits that occur between <since> and <until>. Args can be a 
                                                       commit ID, branch name, HEAD, or any other kind of revision reference.

git log --<file>                                     # only display commits that have the specified file
git log --grep --decorate                            # --graph flag draws a text based graph of commits on left side of commit 
                                                        msgs. --decorate adds names of branches or tags of commits shown.

git log --since=yyyy-mm-dd                           # particular date and year of the logs
git log --until=y-m-d                                # display starting to present logs
---------------------------------------------------------------------------------------------------
git init --base --shared                             # directly creat central repository
---------------------------------------------------------------------------------------------------

git branch                                           # list all of the branches in your repo
git branch <name>                                    # creat new branch
git push --all                                       # to push newly created branches to repo.
git push --tags                                      # to push all local tags to repo
git checkout -b <branch>                             # Create and check out a new branch named <branch>. Drop the -b 
                                                       flag to checkout an existing branch.
git checkout <branch>                                # switched to other branch
git branch -m <presnt name> <othername>              # rename the current branch 
git merge <branch>                                   # Merge <branch> into the current branch
git branch --merged                                  # that will show what branches are merged into master
git branch --on-merged                               # that will show, what branches are not merged into master 
git branch -a                                        # List all branches (local and remote)
git rm <file>                                        # This command deletes the file from your working directory and stages the deletion.
git branch -d                                        # This command deletes the feature branch.
git branch -r                                        # only show the local branches
git branch -v                                        # show branches and commit msg's
=====================================
git push origin:refs/heads/<branch name>             # delete branches from remote repository



git config --list                                    # to list all info about users
git diff                                             # Show unstaged changes between your index and working directory.
git diff --cached                                    # this will show you difference b/w staging and local repo,
git diff HEAD                                        # Show difference between working directory and last commit.
git diff --cached                                    # Show difference between staged changes and last commit
git diff <master>..<otherbranch>                     # difference b/w two branches

git commit --amend                                   # Replace the last commit with the staged changes and last commit 
                                                       combined. Use with nothing staged to edit the last commit’s message.

git commit --amend -m "enter new name"               # change the last commit include commit msg also change and it's creat a new commit id
git status -s                                        # it show the short status
git rebase <base>                                    # Rebase the current branch onto <base>. <base> can be a commit ID,  
                                                       a branch name, a tag, or a relative reference to HEAD.
git reflog                                           # show a log of changes to the local repository’s HEAD. Add 
                                                        --relative-date flag to show date info or --all to show all refs.
-------------------------------------------
UNDOING CHANGES
===========================================
git revert <commit id>                               # Create new commit that undoes all of the changes made in 
                                                         <commit>, then apply it to the current branch.
git reset <file>                                     # Remove <file> from the staging area, but leave the working directory 
                                                         unchanged. This unstages a file without overwriting any changes.
git clean -n                                         # Shows which files would be removed from working directory. Use 
                                                          the -f flag in place of the -n flag to execute the clean.

git clean -f 

git push origin <branch name>                        # current branch to remote repository
git push <branch> --all                              # push all of your local branches to the spececified remote
git push <remote> --force                            # Forces the  git push  even if it results in a non-fast-forward merge. Do not use 
                                                         the --force flag unless you’re absolutely sure you know what you’re doing.

git push <remote> --tags                             # Tags aren’t automatically pushed when you push a branch or use the
                                                        --all flag. The --tags flag sends all of your local tags to the remote repo.
git push --set-upstream origin <branchname>          # of you want to push the data from <branch1> to remote <branch1>


=====================================================================
creat ignore files
=====================================================================
vi.gitignore               # add the files which you want to ignore       # which is use for skip the files while push to central repo,
                              [ add some collection of files ]

     git status
     git add .gitignore
     git commit -a -m "msg"
     git status to show the withoutn ignore files
     
====================================================================     
git stash list                                     # to list all stash files
     ex:- latest files stash@{0}
     ex:- previous files stash@{1} 

git stash show -p stash@{0}                        # this command is print what changes in that particular stashfile. 
git stash save                                     # This command temporarily stores all the modified tracked files.
git stash clean                                    # clean the stash area
git stash pop                                      # This command restores the most recently stashed files.
git stash drop                                     # This command discards the most recently stashed changeset.
git stash apply stash@{0}                          # revert to staging area
git stash drop stash@{0}                           # after revert files to drop the staging area
git remote show arigin                             # show the all information of github

git tag <commit id>                                # This command is used to give tags to the specified commit.
git pull <Repository Link>                         # This command fetches and merges changes on the remote server to your working directory.






                              
